name: Build and Release Fyne App

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read

    env:
      GOPRIVATE: github.com/crazytypewriter/sing-lib

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update SSH client
        run: sudo apt-get update && sudo apt-get install --reinstall -y openssh-client


      - name: Set up Go
        uses: actions/setup-go@v4
        with:
            go-version: '>=1.24.2'

      - name: Add SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Configure Git for SSH
        run: |
          git config --global url."git@github.com:".insteadOf "https://github.com/"


      - name: Vendor dependencies
        run: |
          go mod tidy
          go mod vendor

      - name: Install fyne-cross
        run: |
          go install github.com/fyne-io/fyne-cross@latest

      - name: Build Windows App
        run: |
          fyne-cross windows -arch=amd64 -app-id=io.rd15.tool

      - name: Install GitHub CLI
        if: success()
        run: |
          sudo apt-get install -y gh

      - name: Authenticate GitHub CLI
        if: success()
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          gh auth status

      - name: Get Latest Release Tag and Increment
        run: |
          # Fetch the latest release tag from GitHub
          LATEST_TAG=$(gh release list --limit 1 --json tagName --jq '.[0].tagName')
          
          # Set a default tag if no releases exist
          if [[ -z "$LATEST_TAG" ]]; then
            NEW_TAG="v1.0.0"
          else
          # Extract major, minor, and patch numbers
            MAJOR=$(echo "$LATEST_TAG" | cut -d. -f1 | tr -d 'v')
            MINOR=$(echo "$LATEST_TAG" | cut -d. -f2)
            PATCH=$(echo "$LATEST_TAG" | cut -d. -f3)

            # Increment the patch version
            PATCH=$((PATCH + 1))
            NEW_TAG="v${MAJOR}.${MINOR}.${PATCH}"
          fi
          
          # Get commit hash
          COMMIT_HASH=$(git rev-parse --short HEAD)
          
          # Create the new release with the new tag
          gh release create "$NEW_TAG" \
          /home/runner/work/rd15tool/rd15tool/fyne-cross/dist/windows-amd64/rd15tool.exe.zip \
          --title "$NEW_TAG" \
          --notes "Release created from commit $COMMIT_HASH. This release was automatically generated by GitHub Actions."