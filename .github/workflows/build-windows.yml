name: Build and Release Fyne App

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-sing-box:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v5

      - name: Get latest sing-box release tag
        id: sing-box-tag
        run: |
          LATEST_SING_BOX_TAG=$(gh release list --repo SagerNet/sing-box --limit 1 --exclude-pre-releases --json tagName --jq '.[0].tagName' | tr -d 'v')
          echo "SING_BOX_TAG=$LATEST_SING_BOX_TAG" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout sing-box repository
        uses: actions/checkout@v4
        with:
          repository: SagerNet/sing-box
          ref: v${{ env.SING_BOX_TAG }}
          path: sing-box

      - name: Build sing-box
        working-directory: sing-box
        run: |
          GOOS=linux GOARCH=arm GOMIPS=softfloat go build -v -trimpath -ldflags "-X 'github.com/sagernet/sing-box/constant.Version=${{ env.SING_BOX_TAG }}' -s -w -buildid=" -tags with_wireguard,with_clash_api,with_v2ray_api,with_utls -o sing-box ./cmd/sing-box

      - name: Pack sing-box
        working-directory: sing-box
        run: |
          upx --best --lzma  ./sing-box

      - name: Upload sing-box artifact
        uses: actions/upload-artifact@v4
        with:
          name: sing-box
          path: sing-box

  build-and-release:
    runs-on: ubuntu-latest
    needs: build-sing-box
    strategy:
      matrix:
        platform: [windows-amd64, linux-amd64] # Сборка для Windows и Linux
    env:
      GOPRIVATE: github.com/crazytypewriter/sing-lib
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: ~/.cache/docker
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Initialize and configure go.mod
        run: |
          go mod init github.com/crazytypewriter/rd15tool
          go mod edit -go=1.23.5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: '/home/runner/work/rd15tool/rd15tool/go.mod'

      - name: Configure SSH for Git
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          git config --global url."git@github.com:".insteadOf "https://github.com/"

      - name: Vendor dependencies
        run: |
          go mod tidy
          go mod vendor

      - name: Install fyne-cross
        run: |
          go install github.com/fyne-io/fyne-cross@latest

      - name: Download sing-box artifact
        uses: actions/download-artifact@v4
        with:
          name: sing-box
          path: sing-box

      - name: Copy sing-box debug1
        run: |
          ls -lia embedded/singbox

      - name: Copy sing-box debug2
        run: |
          ls -lia  sing-box/sing-box

      - name: Copy sing-box debug3
        run: |
          ls -lia 

      - name: Copy sing-box to embedded
        run: |
          cp sing-box embedded/singbox/sing-box

      - name: Copy sing-box debug3
        run: |
          ls -lia embedded/singbox/

      - name: Build App
        run: |
          if [ "${{ matrix.platform }}" = "windows-amd64" ]; then
            fyne-cross windows -arch=amd64 -app-id=io.rd15.tool
          elif [ "${{ matrix.platform }}" = "linux-amd64" ]; then
            fyne-cross linux -arch=amd64 -app-id=io.rd15.tool
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rd15tool-${{ matrix.platform }}
          path: fyne-cross/dist/${{ matrix.platform }}/

  release:
    runs-on: ubuntu-latest
    needs: build-and-release # Зависит от завершения сборки
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: rd15tool-windows-amd64
          path: fyne-cross/dist/windows-amd64/

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: rd15tool-linux-amd64
          path: fyne-cross/dist/linux-amd64/

      - name: Install and authenticate GitHub CLI
        run: |
          sudo apt-get install -y gh
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Create Release
        run: |
          LATEST_TAG=$(gh release list --limit 1 --json tagName --jq '.[0].tagName')
          if [[ -z "$LATEST_TAG" ]]; then
            NEW_TAG="v1.0.0"
          else
            MAJOR=$(echo "$LATEST_TAG" | cut -d. -f1 | tr -d 'v')
            MINOR=$(echo "$LATEST_TAG" | cut -d. -f2)
            PATCH=$(echo "$LATEST_TAG" | cut -d. -f3)
            PATCH=$((PATCH + 1))
            NEW_TAG="v${MAJOR}.${MINOR}.${PATCH}"
          fi
          COMMIT_HASH=$(git rev-parse --short HEAD)
          gh release create "$NEW_TAG" \
            fyne-cross/dist/windows-amd64/rd15tool.exe.zip \
            fyne-cross/dist/linux-amd64/rd15tool.tar.xz \
            --title "$NEW_TAG" \
            --notes "Release created from commit $COMMIT_HASH. Includes Windows and Linux builds."